@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@using Fluxor
@using MuensterData.Domain.Common.Constants
@using MuensterData.Domain.Traffic.Actions
@using MuensterData.Domain.Traffic.Actions.Accidents
@using MuensterData.Domain.Traffic.States
@using MuensterData.WebApp.Components.Common
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Maps
@using Syncfusion.Blazor.Popups

@inject IState<TrafficState> State
@inject IDispatcher Dispatcher

<div class="accident-map">
    @if (State.Value.Accidents.MapSettings.IsOpen)
    {
        <MapsSettings></MapsSettings>
    }
    @if (State.Value.Accidents.SourcesVisible)
    {
        <Sources TCloseAction="ToggleMapInfoVisibilityAction">
            <SourceContent>
                <div>
                    <span>Die in dieser Karte verwendeten Daten stammen von OpenData Münster:</span>
                    <a href="https://opendata.stadt-muenster.de/dataset/unf%C3%A4lle-im-regierungsbezirk-m%C3%BCnster">
                        Unfälle im Regierungsbezirk Münster
                    </a>
                </div>
            </SourceContent>
        </Sources>
    }
    <div class="accident-map-content">
        <div class="d-flex justify-content-end">
            <div class="map-info-button" @onclick="OnMapInfoButtonClicked">
                <i class="bi bi-info-circle"></i>
                <i class="bi bi-info-circle-fill"></i>
            </div>
            <div class="map-settings-button" @onclick="OnMapSettingsGearClicked">
                <i class="bi bi-gear"></i>
                <i class="bi bi-gear-fill"></i>
            </div>
        </div>
        <SfMaps Height="700px" Background="#1F1F1F">
            <MapsLegendSettings Visible="true" Mode="LegendMode.Default" Type="LegendType.Markers" UseMarkerShape="true"
                                RemoveDuplicateLegend="true">
                <MapsToggleLegendSettings Enable="true" ApplyShapeSettings="false">
                    <MapsToggleLegendBorder Width="2" Color="green"></MapsToggleLegendBorder>
                </MapsToggleLegendSettings>
                <MapsLegendTextStyle Color="#E0E0E0"></MapsLegendTextStyle>
            </MapsLegendSettings>
            <MapsCenterPosition Latitude="51.9624" Longitude="7.6257"></MapsCenterPosition>
            <MapsZoomSettings Enable="true" MaxZoom="17" ZoomFactor="13">
                <MapsZoomToolbarSettings>
                    <MapsZoomToolbarButton ToolbarItems="ToolbarItems"></MapsZoomToolbarButton>
                </MapsZoomToolbarSettings>
            </MapsZoomSettings>
            <MapsLayers>
                <MapsLayer UrlTemplate="https://tile.openstreetmap.org/level/tileX/tileY.png" TValue="string">
                    <MapsMarkerSettings>
                        <MapsMarker Visible="true" DataSource="State.Value.Accidents.DisplayedAccidents"
                                    TValue="Accident" AnimationDuration="0" LegendText="Year"
                                    LongitudeValuePath="@nameof(Accident.Longitude)" LatitudeValuePath="@nameof(Accident.Latitude)"
                                    Height="10" Width="10" Opacity="State.Value.Accidents.MapSettings.MarkerOpacity"
                                    Shape="MarkerType.Circle" ColorValuePath="Color">
                            <MapsMarkerBorder Width="0.7" Color="black" Opacity="0.6"></MapsMarkerBorder>
                        </MapsMarker>
                    </MapsMarkerSettings>
                    <MapsPolygons>
                        @if (State.Value.Accidents.MapSettings.ShowMuensterCityArea)
                        {
                            <MapsPolygon Points="MuensterArea.MuensterCityAreaPoints" Fill="#007a99" Opacity="0.2">
                            </MapsPolygon>
                        }
                    </MapsPolygons>
                </MapsLayer>
            </MapsLayers>
        </SfMaps>

        <div class="mt-1">
            <div class="d-flex">
                <div>
                    <div class="filter-label">Jahre</div>
                    <SfMultiSelect TValue="int[]" TItem="int" DataSource="State.Value.Accidents.AllFilters.Years" Width="150px"
                    Value="State.Value.Accidents.ActiveFilters.Years">
                        <MultiSelectEvents TValue="int[]" TItem="int" ValueChange="OnSelectedYearsChanged"></MultiSelectEvents>
                    </SfMultiSelect>
                </div>
                <div class="ms-4">
                    <div class="filter-label">Lichtverhältnisse</div>
                    <SfMultiSelect TValue="int[]" TItem="LightCondition" DataSource="State.Value.Accidents.AllFilters.LightConditions" Width="200px"
                    Value="State.Value.Accidents.ActiveFilters.LightConditions">
                        <MultiSelectFieldSettings Text="@nameof(LightCondition.Name)" Value="@nameof(LightCondition.Value)"></MultiSelectFieldSettings>
                        <MultiSelectEvents TValue="int[]" TItem="LightCondition" ValueChange="OnSelectedLightConditionChanged"></MultiSelectEvents>
                    </SfMultiSelect>
                </div>
            </div>
            <div class="mt-3">
                <div class="filter-label d-flex">
                    <span>Beteiligte</span>
                    <SfTooltip class="ms-1 d-flex" Target=".involved-target" Content="@_involvedPartiesTooltip"
                    OpensOn="Hover" Position="Position.BottomRight">
                        <i class="bi bi-question-circle involved-target tooltip-icon"></i>
                    </SfTooltip>
                </div>
                <SfCheckBox CssClass="me-3" Label="Rad" TChecked="bool" Checked="@State.Value.Accidents.ActiveFilters.WithBicycle" ValueChange="OnBicycleCheckboxToggled"></SfCheckBox>
                <SfCheckBox CssClass="me-3" Label="PKW" TChecked="bool" Checked="@State.Value.Accidents.ActiveFilters.WithCar" ValueChange="OnCarCheckboxToggled"></SfCheckBox>
                <SfCheckBox CssClass="me-3" Label="FussgängerIn" TChecked="bool" Checked="@State.Value.Accidents.ActiveFilters.WithPedestrian" ValueChange="OnPedestrianCheckboxToggled"></SfCheckBox>
                <SfCheckBox CssClass="me-3" Label="Kraftrad" TChecked="bool" Checked="@State.Value.Accidents.ActiveFilters.WithMotorcycle" ValueChange="OnMotorcycleCheckboxToggled"></SfCheckBox>
                <SfCheckBox CssClass="me-3" Label="LKW" TChecked="bool" Checked="@State.Value.Accidents.ActiveFilters.WithTruck" ValueChange="OnTruckCheckboxToggled"></SfCheckBox>
                <SfCheckBox Label="Sonstige" TChecked="bool" Checked="@State.Value.Accidents.ActiveFilters.WithOther" ValueChange="OnOtherCheckboxToggled"></SfCheckBox>
            </div>
            <div class="mt-3">
                <div class="filter-label">Bereich</div>
                <div class="d-flex">
                    <SfSwitch id="only-city-area-toggle" TChecked="bool"
                    Checked="@State.Value.Accidents.ActiveFilters.OnlyMuensterCityArea"
                    ValueChange="OnOnlyCityAreaToggled">
                    </SfSwitch>
                    <label class="d-flex ms-2" for="only-city-area-toggle">
                        <span>Nur Stadtgebiet Münster</span>
                        <SfTooltip class="ms-1 d-flex" Target=".only-city-area-target" Content="@_onlyCityAreaTooltip"
                        OpensOn="Hover" Position="Position.BottomRight">
                            <i class="bi bi-question-circle only-city-area-target tooltip-icon"></i>
                        </SfTooltip>
                    </label>
                </div>
            </div>
        </div>
    </div>
</div>

@code
{
    private bool _alreadyInitialized = false;

    private string _involvedPartiesTooltip =
        "Die ausgewählten Checkbox werden über AND verknüpft, d.h. wenn 'Rad' und 'Auto' ausgewählt sind, werden Unfälle angezeigt, an denen mindestens ein Rad und ein Auto beteiligt waren. Das schließt nicht aus, dass es noch andere UnfallteilnehmerInnen gab.";

    private string _onlyCityAreaTooltip =
        "Zeigt nur Daten im (groben) Stadtgebiet Münster an, anstatt im gesamten Regierungsbezirk. Kann die Performance erheblich beeinflussen. Exakter Bereich kann in den Karteneinstellungen sichtbar gemacht werden";

    protected override void OnInitialized()
    {
        if (!_alreadyInitialized)
        {
            Dispatcher.Dispatch(new TrafficPageEnteredAction());
            _alreadyInitialized = true;
        }

        base.OnInitialized();
    }

    public List<ToolbarItem> ToolbarItems =
    [
        ToolbarItem.Zoom, ToolbarItem.ZoomIn, ToolbarItem.ZoomOut, ToolbarItem.Pan
    ];

    private void OnSelectedYearsChanged(MultiSelectChangeEventArgs<int[]> args)
    {
        Dispatcher.Dispatch(new SelectedYearsChangedAction(args.Value ?? []));
    }

    private void OnSelectedLightConditionChanged(MultiSelectChangeEventArgs<int[]> args)
    {
        Dispatcher.Dispatch(new SelectedLightConditionsChangedAction(args.Value ?? []));
    }

    private void OnBicycleCheckboxToggled(ChangeEventArgs<bool> args)
    {
        Dispatcher.Dispatch(new WithBicycleToggled());
    }

    private void OnCarCheckboxToggled(ChangeEventArgs<bool> args)
    {
        Dispatcher.Dispatch(new WithCarToggled());
    }

    private void OnPedestrianCheckboxToggled(ChangeEventArgs<bool> args)
    {
        Dispatcher.Dispatch(new WithPedestrianToggled());
    }

    private void OnMotorcycleCheckboxToggled(ChangeEventArgs<bool> args)
    {
        Dispatcher.Dispatch(new WithMotorcycleToggled());
    }

    private void OnTruckCheckboxToggled(ChangeEventArgs<bool> args)
    {
        Dispatcher.Dispatch(new WithTruckToggled());
    }

    private void OnOtherCheckboxToggled(ChangeEventArgs<bool> args)
    {
        Dispatcher.Dispatch(new WithOtherToggled());
    }

    private void OnMapSettingsGearClicked()
    {
        Dispatcher.Dispatch(new ToggleMapSettingsVisibilityAction());
    }

    private void OnMapInfoButtonClicked()
    {
        Dispatcher.Dispatch(new ToggleMapInfoVisibilityAction());
    }

    private void OnOnlyCityAreaToggled(ChangeEventArgs<bool> args)
    {
        Dispatcher.Dispatch(new ToggleOnlyMuensterCityAreaAction());
    }
}
